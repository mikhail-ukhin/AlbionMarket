@page "/recommendations"
@using AlbionMarket.Core.Configuration;
@using AlbionMarket.Core.Enums;
@using AlbionMarket.Core.Models;
@implements IDisposable

<PageTitle>Reccomendations</PageTitle>

@using AlbionMarket.Core;
@using AlbionMarket.Services
@using System.Timers
@using Microsoft.AspNetCore.Components.QuickGrid
@using Microsoft.Extensions.Options;

@inject MarketPairInfoService MarketPairInfoService;
@inject WorkerStateService WorkerStateService;
@inject MarketPairStateService MarketPairStateService;
@inject IOptions<AlbionMarketScanerSettings> AlbionMarketScanerOptions;

<h1>Albion Market Scanner</h1>

<p>@CurrentTime</p>

<p>Scan in Progress - @ScanInProgress</p>
<p>Items Found - @ItemsFound</p>
<p>Last Scan Start Time - @LastScanTimeStarted</p>
<p>Last Scan Finished Time - @LastScanTimeFinished</p>


@if (recomendations == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <QuickGrid Items="@recomendationsQ">
        <PropertyColumn Property="@(p => p.ItemName)" Sortable="true" />
        <PropertyColumn Property="@(p => p.Tier)" Sortable="true" />
        <PropertyColumn Property="@(p => MapItemQuality(p.ItemQuality))" Sortable="true" />
    </QuickGrid>

    <table class="table">
        <thead>
            <tr>
                <td>Mark as Not Actual</td>
                <td>Mark as Hot</td>
                <th>Name</th>
                <th>Tier</th>
                <th>Enchant</th>
                <th>Quality</th>
                <th>Price (BlackMarket)</th>
                <th>Price (Kaerlion)</th>
                <th>Profit</th>
                <th>Date (BlackMarket)</th>
                <th>Date (Kaerlion)</th>
                <th>Status</th>

            </tr>
        </thead>
        <tbody>
            @foreach (var recommendation in recomendations)
            {
                <tr style="background-color:@GetRowColor(recommendation)">
                    <td><button style="background-color:red"  @onclick="() => MarkItemAsNotActual(recommendation)">Mark as Not Actual</button></td>
                    <td><button style="background-color:forestgreen"  @onclick="() => MarkItemAsHot(recommendation)">Mark as Hot</button></td>
                    <td>@recommendation.ItemName</td>
                    <td>@recommendation.Tier</td>
                    <td>@recommendation.EnchantLevel</td>
                    <td>@MapItemQuality(recommendation.ItemQuality)</td>
                    <td>@recommendation.PriceBlackMarket</td>
                    <td>@recommendation.PriceCaerleon</td>
                    <td>@recommendation.PotentialProfit</td>
                    <td>@recommendation.SellDateBlackMarket</td>
                    <td>@recommendation.SellDateCaerlion</td>
                    <td>@MapRecomendationStatus(recommendation.Status)</td>

                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<MarketRecommendation>? recomendations;
    private IQueryable<MarketRecommendation> recomendationsQ;
    private int ItemsFound;
    private DateTime? LastScanTimeStarted;
    private DateTime? LastScanTimeFinished;
    private Timer timer;
    private DateTime CurrentTime;

    private bool ScanInProgress;

    private void MarkItemAsNotActual(MarketRecommendation recommendation)
    {
        recommendation.Status = MarketPairStatus.NotActual;
        MarketPairStateService.UpdateMarketPairStatus(recommendation.ItemId, recommendation.ItemQuality, MarketPairStatus.NotActual);
    }

    private void MarkItemAsHot(MarketRecommendation recommendation)
    {
        recommendation.Status = MarketPairStatus.PriceIsRising;
        MarketPairStateService.UpdateMarketPairStatus(recommendation.ItemId, recommendation.ItemQuality, MarketPairStatus.PriceIsRising);
    }

    private string GetRowColor(MarketRecommendation recommendation)
    {
        return recommendation.Status switch
        {
            MarketPairStatus.None => "white",
            MarketPairStatus.NotActual => "yellow",
            MarketPairStatus.PriceIsRising => "#72b772",
            _ => throw new ArgumentOutOfRangeException(nameof(recommendation.Status))
        };
    }

    protected override void OnInitialized()
    {
        recomendations = MarketPairInfoService.GetRecomendations();
        recomendationsQ = recomendations.AsQueryable();

        CurrentTime = DateTime.UtcNow;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            timer = new Timer();
            timer.Interval = AlbionMarketScanerOptions.Value.MarketCatalogPageUpdateInterval;
            timer.Elapsed += OnTimerInterval;
            timer.AutoReset = true;
            timer.Enabled = true;
        }
        base.OnAfterRender(firstRender);
    }

    private string MapRecomendationStatus(MarketPairStatus status) => status switch
    {
        MarketPairStatus.None => "None",
        MarketPairStatus.PriceIsRising => "Hot",
        MarketPairStatus.NotActual => "Not Actual",
        _ => throw new ArgumentOutOfRangeException(nameof(status))
    };

    private string MapItemQuality(int quality) =>
                quality switch
                {
                    1 => "Normal",
                    2 => "Good",
                    3 => "Outstanding",
                    4 => "Excellent",
                    5 => "Masterpiece",
                    _ => throw new ArgumentOutOfRangeException(nameof(quality))
                };

    private void OnTimerInterval(object sender, ElapsedEventArgs e)
    {
        Console.WriteLine("Updating values...");

        ItemsFound = WorkerStateService.ItemsFound;
        LastScanTimeFinished = WorkerStateService.LastScanFinished;
        LastScanTimeStarted = WorkerStateService.LastScanStart;

        ScanInProgress = WorkerStateService.ScanInProgress;
        CurrentTime = DateTime.UtcNow;

        recomendations = MarketPairInfoService.GetRecomendations();

        InvokeAsync(() => StateHasChanged());
    }

    public void Dispose()
    {
        // During prerender, this component is rendered without calling OnAfterRender and then immediately disposed
        // this mean timer will be null so we have to check for null or use the Null-conditional operator ?
        timer?.Dispose();
    }
}
